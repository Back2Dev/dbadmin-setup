const fs = require('fs')
var mkpath = require('mkpath')
const prettier = require('prettier')
const prettierRules = require('../.prettierrc.json')
// This feels clumsy, something changed in the change-case module, but the doco doesn't explain how to bring in additional modules
const cc = require('change-case')
const { titleCase } = require('title-case')

cc.titleCase = titleCase
prettierRules.parser = 'babel'

const debug = require('debug')('dbadmin:collection-scripts')

const collectionTemplate = `
/**x
 * WARNING: This file was generated by npx dbadmin-setup 
 * - The script looks in /imports/api for folders ending in 's' and 
 * the code below is generated from that list.
 * Some folders are explicitly excluded, such as 'users', 'audits', 'logs' etc
 * 
 * DO NOT EDIT!!!
 */

// Generated at <%= WHEN %> by <%= WHO %>

<%= IMPORT_SCHEMAS %>

 const getCollection = (name) => {
   switch (name) {    
     <%= COLLECTION_CASES %>
     default:
       return null
   }
 }
 
 export default getCollection
`

const routeTemplate = `
/**x
 * WARNING: This file was generated by npx dbadmin-setup 
 * - The script looks in /imports/api for folders ending in 's' and 
 * the code below is generated from that list.
 * Some folders are explicitly excluded, such as 'users', 'audits', 'logs' etc
 * 
 * DO NOT EDIT!!!
 */

 // Generated at <%= WHEN %> by <%= WHO %>
 
import React, { Suspense, lazy } from 'react'
import { Route, Switch } from 'react-router-dom'

import Loading from '/imports/ui/components/commons/loading.js'

// Generated lazy imports go here...

<%= ROUTE_IMPORTS %>

//
// This file contains a list of routes for database admin pages
// It is generated from a list of modules
//
export default GeneratedRoutes = () => {
  return (
    <Suspense fallback={<Loading loading />}>
      <Switch>
        {/** Generated routes go here */}
        <%= ROUTE_MARKUP %>
      </Switch>
    </Suspense>
  )
}
`
const merge = (t, params) => {
  let result = t

  for (let key in params) {
    const reg = new RegExp(`<%=\\s*${key}\\s*%>`, 'gm')
    result = result.replace(reg, params[key])
  }

  return result
}

const unwanted = 'users collections profiles audits logs utils counters'.split(/[\s,]+/)

const generate = (opts) => {
  const folder = opts._[1]
  debug('Generating...')
  const errs = []
  const apiFolder = `${folder}/imports/api`
  const collections = fs
    .readdirSync(apiFolder)
    .filter((dir) => fs.lstatSync(`${apiFolder}/${dir}`).isDirectory())
    .filter((dir) => dir.match(/s$/))
    .filter((dir) => !unwanted.includes(dir))
    .map((dir) => ({
      folder: dir,
      collection: cc.titleCase(dir).replace('-', ''),
      name: cc.pascalCase(dir),
    }))
  const mergeData = {
    WHEN: new Date().toDateString(),
    WHO: process.env.USER || 'Unkown',
    ROUTE_IMPORTS: collections
      .map(
        (c) =>
          `const ${c.collection} = lazy(() => import('/imports/ui/admin/${c.folder}/lister.js'))`
      )
      .join('\n'),
    ROUTE_MARKUP: collections
      .map((c) => `<Route path="/admin/${c.folder}" component={${c.collection}} />`)
      .join('\n'),
    IMPORT_SCHEMAS: collections
      .map(
        (c) =>
          `import ${c.name}, { ${c.collection}Schema } from '/imports/api/${c.folder}/schema'`
      )
      .join('\n'),
    COLLECTION_CASES: collections
      .map((c) => {
        return `case '${c.folder}':
    return { collection: ${c.name}, schema: ${c.collection}Schema }`
      })
      .join('\n'),
  }
  debug(mergeData)
  //
  // Now do the magic
  //
  const buf = merge(template, mergeData)
  debug(buf)
  const destf = `${folder}/imports/api/collections/binder.js`
  mkpath.sync(`${folder}/imports/api/collections`)
  fs.writeFileSync(destf, prettier.format(buf, prettierRules))
  console.log(`Done, saved collections definitions to ${destf}`)
  return errs
}

module.exports = generate
